module normalize-ddl

imports

  stratego/-
  signatures/-
  normalized-signatures
  common
  pp
  runtime/index/-
  runtime/nabl/-
  runtime/properties/-
  runtime/types/-
  runtime/task/-
  runtime/analysis/-
  runtime/editor/-
  names/-
  common

rules // CREATE PROPERTY GRAPH

  normalize-CreatePropertyGraph:
    t@CreatePropertyGraph(_, _, _, _, _) -> result
    with CreatePropertyGraph(graphName, baseGraphs, vertexTables, edgeTables, options) := <normalize-value-expressions> t
       ; baseGraphs' := <alltd(normalize-BaseElementTable)> baseGraphs
       ; vertexTables' := <?Some(<id>); VertexTables(map(normalize-VertexTable)) + ?None(); !VertexTables([])> vertexTables
       ; edgeTables' := <?Some(<id>); EdgeTables(map(normalize-EdgeTable)) + ?None(); !EdgeTables([])> edgeTables
       ; result := <alltd(normalize-LabelAndProperties)> CreatePropertyGraph(graphName, baseGraphs', vertexTables', edgeTables', options)

  normalize-BaseElementTable:
    BaseElementTable(VarRef(tableName), alias) -> BaseElementTable(tableName, alias')
    with alias' := <normalize-tableAlias(|tableName)> alias

  normalize-VertexTable:
    VertexTable(name@Name(_, tableName), tableAlias, keyClause, labelAndPropertiesClause)
      -> VertexTable(name, tableAlias', keyClause, labelAndPropertiesClause')
    with tableAlias' := <normalize-tableAlias(|tableName)> tableAlias
       ; labelAndPropertiesClause' := <normalize-LabelAndPropertiesClause(|tableAlias')> labelAndPropertiesClause

  normalize-EdgeTable:
    EdgeTable(name@Name(_, tableName), tableAlias, keyClause, sourceVertexTable, destinationVertexTable, labelAndPropertiesClause)
      -> EdgeTable(name, tableAlias', keyClause, sourceVertexTable', destinationVertexTable', labelAndPropertiesClause')
    with tableAlias' := <normalize-tableAlias(|tableName)> tableAlias
       ; sourceVertexTable' := <origin-track-forced(SourceVertexTable(normalize-ReferencingKeyClause, id))> sourceVertexTable
       ; destinationVertexTable' := <origin-track-forced(DestinationVertexTable(normalize-ReferencingKeyClause, id))> destinationVertexTable
       ; labelAndPropertiesClause' := <normalize-LabelAndPropertiesClause(|tableAlias')> labelAndPropertiesClause

  normalize-tableAlias(|tableName):
    Some(AsTableAlias(_, TableAlias(tableAlias))) -> tableAlias

  normalize-tableAlias(|tableName):
    None() -> tableName

  normalize-LabelAndPropertiesClause(|tableAlias):
    None() -> LabelAndPropertiesClause([defaultLabelAndProperties])
    with defaultLabelClause := LabelClause(tableAlias)
       ; defaultPropertiesClause := None()
       ; defaultLabelAndProperties := LabelAndProperties(defaultLabelClause, defaultPropertiesClause)

  normalize-LabelAndPropertiesClause(|tableAlias):
    Some(t@LabelAndPropertiesClause(_)) -> t

  normalize-LabelAndPropertiesClause(|tableAlias):
    Some(LabelAndPropertiesClauseWithDefaultLabel(propertiesClause, otherLabelsAndProperties)) -> LabelAndPropertiesClause(allLabelsAndProperties)
    with defaultLabel := LabelAndProperties(LabelClause(tableAlias), Some(propertiesClause))
       ; allLabelsAndProperties := [defaultLabel|otherLabelsAndProperties]

  normalize-LabelAndProperties:
    LabelAndProperties(labelClause, propertiesClause) -> LabelAndProperties(labelClause, propertiesClause')
    with propertiesClause' := <normalize-PropertiesClause> propertiesClause

  normalize-PropertiesClause:
    Some(PropertyExpressions(properties)) -> Some(PropertyExpressions(properties'))
    with properties' := <map(try(normalize-property-expression); try(normalize-property))> properties

  normalize-PropertiesClause:
    None() -> Some(PropertiesAreAllColumns(optionalAreKeyword, exceptProperties))
    with optionalAreKeyword := None()
       ; exceptProperties := None()

  normalize-PropertiesClause = ?Some(NoProperties()); !Some(PropertyExpressions([]))

  normalize-PropertiesClause:
    t@Some(PropertiesAreAllColumns(_, _)) -> t

  normalize-property-expression:
    ExpAsVar(String(s), var) -> ExpAsVar(VarRef(s), var)

  normalize-property-expression:
    ExpAsVar(VarRef(v), var) -> ExpAsVar(VarRef(v), var)

  normalize-property:
    ExpAsVar(exp, Some(VarAssign(propertyName))) -> ExpAsVar(exp, propertyName)

  normalize-property:
    ExpAsVar(exp@VarRef(columnName), None()) -> ExpAsVar(exp, propertyName)
    with propertyName := columnName

  normalize-ReferencingKeyClause:
    Some(ReferencingKeyClause(keyClause)) -> Some(keyClause)

  normalize-ReferencingKeyClause:
    None() -> None()

rules // DROP PROPERTY GRAPH

  normalize-DropPropertyGraph:
    DropPropertyGraph(graphName) -> DropPropertyGraph(graphName')
    with graphName' := <alltd(norm-identifier)> graphName

rules // CALL

  normalize-CallStatement = normalize-value-expressions
