module DDL

imports

  Names
  Expressions
  Literals

template options

  keyword -/- [a-zA-Z0-9]

context-free syntax // CREATE PROPERTY GRAPH

  Statement.CreatePropertyGraph = <CREATE PROPERTY GRAPH <GraphName> <BaseGraphs?> <VertexTables?> <EdgeTables?> <OptionsClause?>> {case-insensitive}

  OptionsClause.OptionsClause = <OPTIONS ( <{OPTION ","}+> )> {case-insensitive}

  VertexTables.VertexTables = <VERTEX TABLES ( <{VertexTable ","}+> )> {case-insensitive}

  EdgeTables.EdgeTables = <EDGE TABLES ( <{EdgeTable ","}+> )> {case-insensitive}

  VertexTable.VertexTable = <<TableName> <AsTableAlias?> <KeyClause?> <LabelAndPropertiesClause?>>

  EdgeTable.EdgeTable = <<TableName> <AsTableAlias?> <KeyClause?> <SourceVertexTable> <DestinationVertexTable> <LabelAndPropertiesClause?>>

  AsTableAlias.AsTableAlias = <<AS-Keyword?> <TableAlias>>

  AS-Keyword.AS-Keyword = <AS> {case-insensitive}

  TableAlias.TableAlias = Identifier

  SourceVertexTable.SourceVertexTable = <SOURCE <ReferencingKeyClause?> <ReferencedVertexTable>> {case-insensitive}

  DestinationVertexTable.DestinationVertexTable = <DESTINATION <ReferencingKeyClause?> <ReferencedVertexTable>> {case-insensitive}

  ReferencingKeyClause.ReferencingKeyClause = <<KeyClause> REFERENCES> {case-insensitive}

  ReferencedVertexTable.ReferencedVertexTable = <<TableName> <ReferencedColumnList?>>

  LabelAndPropertiesClause.LabelAndPropertiesClause = LabelAndProperties+

  LabelAndPropertiesClause.LabelAndPropertiesClauseWithDefaultLabel = <<PropertiesClause> <LabelAndProperties*>>

  LabelAndProperties.LabelAndProperties = <<LabelClause> <PropertiesClause?>>

  LabelClause.LabelClause = <LABEL <Identifier>> {case-insensitive}

  PropertiesClause.PropertyExpressions = <PROPERTIES ( <{ExpAsVar ","}+> )> {case-insensitive}

  PropertiesClause.NoProperties = <NO PROPERTIES> {case-insensitive}

  PropertiesClause.PropertiesAreAllColumns = <PROPERTIES <AreKeyWord?> ALL COLUMNS <ExceptColumns?>> {case-insensitive}

  AreKeyWord.AreKeyWord = <ARE> {case-insensitive}

  ExceptColumns.Except = <EXCEPT ( <{Identifier ","}+> )> {case-insensitive}

  KeyClause.KeyClause = <KEY ( <{Identifier ","}+> )> {case-insensitive}

  ReferencedColumnList.ReferencedColumnList = <( <{Identifier ","}+> )>

context-free syntax // DROP PROPERTY GRAPH

  Statement.DropPropertyGraph = <DROP PROPERTY GRAPH <GraphName>> {case-insensitive}

context-free syntax // BASE GRAPHS

  BaseGraphs.BaseGraphs = <BASE GRAPHS ( <{BaseGraph ","}+> )> {case-insensitive}

  BaseGraph.BaseGraph = <<GraphName> <ElementTablesClause?>>

  ElementTablesClause.ElementTables = <ELEMENT TABLES ( <{BaseElementTable ","}+> )> {case-insensitive}

  BaseElementTable.BaseElementTable = <<VarRef> <AsTableAlias?>>

  ElementTablesClause.AllElementTables = <ALL ELEMENT TABLES <ExceptElementTables?>> {case-insensitive}

  ExceptElementTables.ExceptElementTables = <EXCEPT ( <{Identifier ","}+> )> {case-insensitive}

context-free syntax // CALL

  Statement.CallStatement = <CALL <LocalOrSchemaQualifiedName> ( <{Exp ","}*> )> {case-insensitive}
